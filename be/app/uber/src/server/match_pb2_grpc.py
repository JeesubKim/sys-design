# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import match_pb2 as match__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in match_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MatchServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.estimate = channel.unary_unary(
                '/match.MatchService/estimate',
                request_serializer=match__pb2.EstimateRequest.SerializeToString,
                response_deserializer=match__pb2.EstimateResponse.FromString,
                _registered_method=True)
        self.match = channel.unary_unary(
                '/match.MatchService/match',
                request_serializer=match__pb2.MatchRequest.SerializeToString,
                response_deserializer=match__pb2.Match.FromString,
                _registered_method=True)
        self.updateMatch = channel.unary_unary(
                '/match.MatchService/updateMatch',
                request_serializer=match__pb2.UpdateMatchRequest.SerializeToString,
                response_deserializer=match__pb2.Match.FromString,
                _registered_method=True)
        self.ListMatches = channel.unary_unary(
                '/match.MatchService/ListMatches',
                request_serializer=match__pb2.ListMatchesRequest.SerializeToString,
                response_deserializer=match__pb2.ListMatchesResponse.FromString,
                _registered_method=True)


class MatchServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def estimate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def match(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateMatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMatches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MatchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'estimate': grpc.unary_unary_rpc_method_handler(
                    servicer.estimate,
                    request_deserializer=match__pb2.EstimateRequest.FromString,
                    response_serializer=match__pb2.EstimateResponse.SerializeToString,
            ),
            'match': grpc.unary_unary_rpc_method_handler(
                    servicer.match,
                    request_deserializer=match__pb2.MatchRequest.FromString,
                    response_serializer=match__pb2.Match.SerializeToString,
            ),
            'updateMatch': grpc.unary_unary_rpc_method_handler(
                    servicer.updateMatch,
                    request_deserializer=match__pb2.UpdateMatchRequest.FromString,
                    response_serializer=match__pb2.Match.SerializeToString,
            ),
            'ListMatches': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMatches,
                    request_deserializer=match__pb2.ListMatchesRequest.FromString,
                    response_serializer=match__pb2.ListMatchesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'match.MatchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('match.MatchService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MatchService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def estimate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/match.MatchService/estimate',
            match__pb2.EstimateRequest.SerializeToString,
            match__pb2.EstimateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def match(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/match.MatchService/match',
            match__pb2.MatchRequest.SerializeToString,
            match__pb2.Match.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateMatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/match.MatchService/updateMatch',
            match__pb2.UpdateMatchRequest.SerializeToString,
            match__pb2.Match.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListMatches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/match.MatchService/ListMatches',
            match__pb2.ListMatchesRequest.SerializeToString,
            match__pb2.ListMatchesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
